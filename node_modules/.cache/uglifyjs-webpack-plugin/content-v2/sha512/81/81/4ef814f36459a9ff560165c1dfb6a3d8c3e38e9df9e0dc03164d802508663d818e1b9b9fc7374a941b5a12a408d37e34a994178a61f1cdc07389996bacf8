{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"C:\\\\Users\\\\Администратор\\\\appjs\\\\src\\\\app.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"configurable\",\"enumerable\",\"get\",\"r\",\"value\",\"n\",\"__esModule\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"emitter\",\"player\",\"platforms\",\"stars\",\"game\",\"Phaser\",\"Game\",\"CANVAS\",\"preload\",\"load\",\"script\",\"image\",\"spritesheet\",\"create\",\"physics\",\"startSystem\",\"Physics\",\"ARCADE\",\"upKey\",\"input\",\"keyboard\",\"addKey\",\"Keyboard\",\"SPACEBAR\",\"leftKey\",\"A\",\"rightKey\",\"D\",\"add\",\"tileSprite\",\"world\",\"setBounds\",\"group\",\"enableBody\",\"ground\",\"height\",\"scale\",\"setTo\",\"body\",\"immovable\",\"ledge\",\"sprite\",\"centerX\",\"centerY\",\"arcade\",\"enable\",\"bounce\",\"y\",\"gravity\",\"collideWorldBounds\",\"fixedRotation\",\"animations\",\"star\",\"Math\",\"random\",\"createCursorKeys\",\"camera\",\"follow\",\"Camera\",\"FOLLOW_LOCKON\",\"makeParticles\",\"minParticleSpeed\",\"maxParticleSpeed\",\"minParticleScale\",\"maxParticleScale\",\"width\",\"flow\",\"filter\",\"getContext\",\"update\",\"hitPlatform\",\"collide\",\"overlap\",\"collectStar\",\"this\",\"velocity\",\"x\",\"isDown\",\"play\",\"touching\",\"down\",\"render\",\"kill\"],\"mappings\":\"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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, {\\n \\t\\t\\t\\tconfigurable: false,\\n \\t\\t\\t\\tenumerable: true,\\n \\t\\t\\t\\tget: getter\\n \\t\\t\\t});\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 0);\\n\",\"    //import character from './character/model/sprite.png';\\r\\n//import snow from './assets/snow.png';\\r\\n//import leaf from './assets/leaf1.png';\\r\\n//import backgroundForest from './location/forest/background.jpg';\\r\\n//import ground from './assets/platform.png';\\r\\n//import star from './assets/star.png';\\r\\n//\\r\\n//var game = new Phaser.Game(800 - 4, 600 - 27, Phaser.WEBGL, '', { preload: preload, create: create, update: update, render: render });\\r\\n//\\r\\n//function preload() {\\r\\n//    game.load.script('filter', 'https://cdn.rawgit.com/photonstorm/phaser-ce/master/filters/Fire.js');\\r\\n//\\r\\n//    game.load.script('gray', 'https://cdn.rawgit.com/photonstorm/phaser-ce/master/filters/Gray.js');\\r\\n//    game.load.image('snow', snow);\\r\\n//    game.load.image('leaf', leaf);\\r\\n//    game.load.image('sky', backgroundForest);\\r\\n//    game.load.image('ground', ground);\\r\\n//    game.load.image('star', star);\\r\\n//    game.load.spritesheet('dude', character, 104, 151, 14);\\r\\n//\\r\\n//}\\r\\n\\r\\nvar game = new Phaser.Game(800 - 4, 600 - 27, Phaser.CANVAS, '', { preload: preload, create: create, update: update, render: render });\\r\\n\\r\\nfunction preload() {\\r\\n    game.load.script('filter', 'https://cdn.rawgit.com/photonstorm/phaser-ce/master/filters/Fire.js');\\r\\n\\r\\n    game.load.script('gray', 'https://cdn.rawgit.com/photonstorm/phaser-ce/master/filters/Gray.js');\\r\\n    game.load.image('snow', '../src/assets/snow.png');\\r\\n    game.load.image('leaf', '../src/assets/leaf1.png');\\r\\n    game.load.image('sky', '../src/location/forest/background.jpg');\\r\\n    game.load.image('ground', '../src/assets/platform.png');\\r\\n    game.load.image('star', '../src/assets/star.png');\\r\\n    game.load.spritesheet('dude', '../src/character/model/sprite.png', 104, 151, 14);\\r\\n\\r\\n}\\r\\n\\r\\nvar emitter;\\r\\nvar player;\\r\\nvar platforms;\\r\\nvar cursors;\\r\\n\\r\\nvar stars;\\r\\nvar score = 0;\\r\\nvar scoreText;\\r\\n\\r\\nfunction create() {\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //  We're going to be using physics, so enable the Arcade Physics system\\r\\n    game.physics.startSystem(Phaser.Physics.ARCADE);\\r\\n\\r\\n    //  A simple background for our game\\r\\n\\r\\n\\r\\n    upKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\\r\\n    leftKey = game.input.keyboard.addKey(Phaser.Keyboard.A);\\r\\n    rightKey = game.input.keyboard.addKey(Phaser.Keyboard.D);\\r\\n\\r\\n\\r\\n    game.add.tileSprite(0, 0, 1920, 600-27, 'sky');\\r\\n\\r\\n    game.world.setBounds(0, 0, 1920, 600-27);\\r\\n\\r\\n    //  The platforms group contains the ground and the 2 ledges we can jump on\\r\\n    platforms = game.add.group();\\r\\n\\r\\n    //  We will enable physics for any object that is created in this group\\r\\n    platforms.enableBody = true;\\r\\n\\r\\n    // Here we create the ground.\\r\\n    var ground = platforms.create(0, game.world.height - 64, 'ground');\\r\\n\\r\\n    //  Scale it to fit the width of the game (the original sprite is 400x32 in size)\\r\\n    ground.scale.setTo(20, 2);\\r\\n    //  This stops it from falling away when you jump on it\\r\\n    ground.body.immovable = true;\\r\\n\\r\\n    //  Now let's create two ledges\\r\\n    var ledge = platforms.create(400, 450, 'ground');\\r\\n    ledge.body.immovable = true;\\r\\n\\r\\n    ledge = platforms.create(-150, 100, 'ground');\\r\\n    ledge.body.immovable = true;\\r\\n\\r\\n    //game.input.onDown.add(shake, this);\\r\\n    // The player and its settings    \\r\\n    player = game.add.sprite(game.world.centerX, game.world.centerY, 'dude');\\r\\n    //player = game.add.sprite(32, game.world.height - 150, 'dude');\\r\\n\\r\\n    //  We need to enable physics on the player\\r\\n    game.physics.arcade.enable(player);\\r\\n\\r\\n    //  Player physics properties. Give the little guy a slight bounce.\\r\\n    player.body.bounce.y = 0;\\r\\n    player.body.gravity.y = 800;\\r\\n    player.body.collideWorldBounds = true;\\r\\n\\r\\n    player.body.fixedRotation = true;\\r\\n\\r\\n    //  Our two animations, walking left and right.\\r\\n    player.animations.add('right', [0, 1, 2, 3, 4, 5], 6, true);\\r\\n    player.animations.add('left', [6, 7, 8, 9, 10, 11], 6, true);\\r\\n    player.animations.add('stay', [12, 13], 1, true);\\r\\n\\r\\n    //  Finally some stars to collect\\r\\n    stars = game.add.group();\\r\\n\\r\\n    //  We will enable physics for any star that is created in this group\\r\\n    stars.enableBody = true;\\r\\n\\r\\n    //  Here we'll create 12 of them evenly spaced apart\\r\\n    for (var i = 0; i < 12; i++)\\r\\n    {\\r\\n        //  Create a star inside of the 'stars' group\\r\\n        var star = stars.create(i * 70, 0, 'star');\\r\\n\\r\\n        //  Let gravity do its thing\\r\\n        star.body.gravity.y = 300;\\r\\n\\r\\n        //  This just gives each star a slightly random bounce value\\r\\n        star.body.bounce.y = 0.7 + Math.random() * 0.2;\\r\\n    }\\r\\n\\r\\n    //  The score\\r\\n    //scoreText = game.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });\\r\\n\\r\\n    //  Our controls.\\r\\n    cursors = game.input.keyboard.createCursorKeys();\\r\\n    \\r\\n    game.camera.follow(player, Phaser.Camera.FOLLOW_LOCKON, 0.1, 0.1);\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    emitter = game.add.emitter(game.world.centerX, 0, 100);\\r\\n\\r\\n    emitter.makeParticles('snow');\\r\\n\\r\\n    emitter.minParticleSpeed.setTo(-300, 30);\\r\\n    emitter.maxParticleSpeed.setTo(300, 100);\\r\\n    emitter.minParticleScale = 0.03;\\r\\n    emitter.maxParticleScale = 0.05;\\r\\n    emitter.gravity = 50;\\r\\n    emitter.width  = 1920;\\r\\n    //emitter.width = \\r\\n\\r\\n    //  This will emit a quantity of 5 particles every 500ms. Each particle will live for 2000ms.\\r\\n    //  The -1 means \\\"run forever\\\"\\r\\n    emitter.flow(4000, 500, 20, -1);\\r\\n\\r\\n\\r\\n    //filter = game.add.filter('gray');\\r\\n    //game.world.filters = [filter];\\r\\n\\r\\n\\r\\n\\r\\n    var gray = game.add.filter('Gray');\\r\\n\\r\\n    //game.world.filters = [gray];\\r\\n\\r\\n    Phaser.CANVAS.getContext('2d').filter = 'blur(5px)';\\r\\n\\r\\n}\\r\\n\\r\\nfunction update() {\\r\\n\\r\\n    //  Collide the player and the stars with the platforms\\r\\n    var hitPlatform = game.physics.arcade.collide(player, platforms);\\r\\n    game.physics.arcade.collide(stars, platforms);\\r\\n\\r\\n    //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function\\r\\n    game.physics.arcade.overlap(player, stars, collectStar, null, this);\\r\\n\\r\\n    //  Reset the players velocity (movement)\\r\\n\\r\\n    //player.body.setZeroVelocity();\\r\\n    player.body.velocity.x = 0;\\r\\n\\r\\n    if (leftKey.isDown)\\r\\n    {\\r\\n        //  Move to the left\\r\\n        player.body.velocity.x = -150;\\r\\n\\r\\n        player.animations.play('left');\\r\\n    }\\r\\n    else if (rightKey.isDown)\\r\\n    {\\r\\n        //  Move to the right\\r\\n        player.body.velocity.x = 150;\\r\\n\\r\\n        player.animations.play('right');\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        //  Stand still\\r\\n        player.animations.play('stay');\\r\\n    }\\r\\n    \\r\\n    //  Allow the player to jump if they are touching the ground.\\r\\n    if (upKey.isDown && player.body.touching.down && hitPlatform)\\r\\n    {\\r\\n        player.body.velocity.y = -350;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nfunction collectStar (player, star) {\\r\\n    \\r\\n    // Removes the star from the screen\\r\\n    star.kill();\\r\\n\\r\\n    //  Add and update the score\\r\\n    //score += 10;\\r\\n    //scoreText.text = 'Score: ' + score;\\r\\n\\r\\n}\\r\\n\\r\\nfunction render() {\\r\\n\\r\\n    //game.debug.cameraInfo(game.camera, 32, 32);\\r\\n    //game.debug.spriteCoords(player, 32, 500);\\r\\n\\r\\n}\\r\\n\"]}","code":"!function(e){var a={};function r(t){if(a[t])return a[t].exports;var o=a[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=a,r.d=function(e,a,t){r.o(e,a)||Object.defineProperty(e,a,{configurable:!1,enumerable:!0,get:t})},r.r=function(e){Object.defineProperty(e,\"__esModule\",{value:!0})},r.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(a,\"a\",a),a},r.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},r.p=\"\",r(r.s=0)}([function(e,a){var r,t,o,d,s=new Phaser.Game(796,573,Phaser.CANVAS,\"\",{preload:function(){s.load.script(\"filter\",\"https://cdn.rawgit.com/photonstorm/phaser-ce/master/filters/Fire.js\"),s.load.script(\"gray\",\"https://cdn.rawgit.com/photonstorm/phaser-ce/master/filters/Gray.js\"),s.load.image(\"snow\",\"../src/assets/snow.png\"),s.load.image(\"leaf\",\"../src/assets/leaf1.png\"),s.load.image(\"sky\",\"../src/location/forest/background.jpg\"),s.load.image(\"ground\",\"../src/assets/platform.png\"),s.load.image(\"star\",\"../src/assets/star.png\"),s.load.spritesheet(\"dude\",\"../src/character/model/sprite.png\",104,151,14)},create:function(){s.physics.startSystem(Phaser.Physics.ARCADE),upKey=s.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR),leftKey=s.input.keyboard.addKey(Phaser.Keyboard.A),rightKey=s.input.keyboard.addKey(Phaser.Keyboard.D),s.add.tileSprite(0,0,1920,573,\"sky\"),s.world.setBounds(0,0,1920,573),(o=s.add.group()).enableBody=!0;var e=o.create(0,s.world.height-64,\"ground\");e.scale.setTo(20,2),e.body.immovable=!0;var a=o.create(400,450,\"ground\");a.body.immovable=!0,(a=o.create(-150,100,\"ground\")).body.immovable=!0,t=s.add.sprite(s.world.centerX,s.world.centerY,\"dude\"),s.physics.arcade.enable(t),t.body.bounce.y=0,t.body.gravity.y=800,t.body.collideWorldBounds=!0,t.body.fixedRotation=!0,t.animations.add(\"right\",[0,1,2,3,4,5],6,!0),t.animations.add(\"left\",[6,7,8,9,10,11],6,!0),t.animations.add(\"stay\",[12,13],1,!0),(d=s.add.group()).enableBody=!0;for(var i=0;i<12;i++){var n=d.create(70*i,0,\"star\");n.body.gravity.y=300,n.body.bounce.y=.7+.2*Math.random()}s.input.keyboard.createCursorKeys(),s.camera.follow(t,Phaser.Camera.FOLLOW_LOCKON,.1,.1),(r=s.add.emitter(s.world.centerX,0,100)).makeParticles(\"snow\"),r.minParticleSpeed.setTo(-300,30),r.maxParticleSpeed.setTo(300,100),r.minParticleScale=.03,r.maxParticleScale=.05,r.gravity=50,r.width=1920,r.flow(4e3,500,20,-1);s.add.filter(\"Gray\");Phaser.CANVAS.getContext(\"2d\").filter=\"blur(5px)\"},update:function(){var e=s.physics.arcade.collide(t,o);s.physics.arcade.collide(d,o),s.physics.arcade.overlap(t,d,i,null,this),t.body.velocity.x=0,leftKey.isDown?(t.body.velocity.x=-150,t.animations.play(\"left\")):rightKey.isDown?(t.body.velocity.x=150,t.animations.play(\"right\")):t.animations.play(\"stay\");upKey.isDown&&t.body.touching.down&&e&&(t.body.velocity.y=-350)},render:function(){}});function i(e,a){a.kill()}}]);","extractedComments":[]}